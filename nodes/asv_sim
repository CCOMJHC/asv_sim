#!/usr/bin/env python

# Roland Arsenault
# Center for Coastal and Ocean Mapping
# University of New Hampshire
# Copyright 2017, All rights reserved.

import math

import rospy
from std_msgs.msg import Bool
from asv_srvs.srv import VehicleState
from asv_srvs.srv import VehicleStateRequest
from asv_srvs.srv import VehicleStateResponse
from asv_srvs.srv import PilotControl
from asv_srvs.srv import PilotControlRequest
from asv_srvs.srv import PilotControlResponse
from asv_msgs.msg import HeadingHold
from asv_msgs.msg import BasicPositionStamped
from asv_msgs.msg import HeadingStamped

import asv_sim.dynamics
import asv_sim.coastal_surveyor

class AsvSim:
    def __init__(self):
        self.state = VehicleStateRequest.VP_STATE_PAUSE
        self.pilot_control = False
        
        self.throttle = 0.0
        self.rudder = 0.0
        
        
        self.dynamics = asv_sim.dynamics.Dynamics(asv_sim.coastal_surveyor.coastal_surveyor)

    def run(self):
        rospy.init_node('asv_sim')
        self.state_service = rospy.Service('/control/vehicle/state', VehicleState, self.state)
        self.pilot_service = rospy.Service('/control/vehicle/pilot', PilotControl, self.pilot)
        self.inhibit_subscriber = rospy.Subscriber('/control/drive/inhibit', Bool, self.inhibit)
        self.heading_hole_subscriber = rospy.Subscriber('/control/drive/heading_hold', HeadingHold, self.heading_hold)
        self.position_publisher = rospy.Publisher('/sensor/vehicle/position', BasicPositionStamped, queue_size = 5)
        self.heading_publisher = rospy.Publisher('/sensor/vehicle/heading', HeadingStamped, queue_size = 5)
        rospy.Timer(rospy.Duration.from_sec(0.05),self.update)
        rospy.spin()
        
    def state(self,req):
        if req.desired_state in (VehicleStateRequest.VP_STATE_PAUSE, VehicleStateRequest.VP_STATE_ACTIVE):
            self.state = req.desired_state
            ret = VehicleStateResponse()
            ret.command_response = VehicleStateResponse.STATE_REQUEST_ACCEPTED
            return ret
        else:
            ret = VehicleStateResponse()
            ret.command_response = VehicleStateResponse.STATE_REQUEST_REJECTED_ILLEGAL_TARGET_STATE
            return ret
    
    def pilot(self,req):
        self.pilot_control = req.control_request
        ret = PilotControlResponse()
        ret.command_response = PilotControlResponse.PILOT_REQUEST_ACCEPTED
        return ret
    
    def inhibit(self,data):
        pass
    
    def heading_hold(self,data):
        self.throttle = data.thrust.value
        current_heading = self.dynamics.heading
        heading_delta = data.heading.heading - current_heading
        if heading_delta>math.pi:
            heading_delta -= math.pi*2.0
        if heading_delta<-math.pi:
            heading_delta += math.pi*2.0
        self.rudder = max(-1.0,min(1.0,heading_delta))
        
        
    def update(self, event):
        self.dynamics.update(self.throttle,self.rudder,event.current_real)
        p = BasicPositionStamped()
        p.basic_position.position.latitude = math.degrees(self.dynamics.latitude)
        p.basic_position.position.longitude = math.degrees(self.dynamics.longitude)
        p.basic_position.cog = self.dynamics.heading
        p.basic_position.sog = self.dynamics.speed
        p.header.stamp = self.dynamics.last_update
        self.position_publisher.publish(p)
        h = HeadingStamped()
        h.header.stamp = self.dynamics.last_update
        h.heading.heading = self.dynamics.heading
        self.heading_publisher.publish(h)
        

if __name__ == '__main__':
    try:
        sim = AsvSim()
        sim.run()
    except rospy.ROSInterruptException:
        pass
